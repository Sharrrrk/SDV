apiVersion: v1
kind: Namespace
metadata:
  name: sdv
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: autoware
  namespace: sdv
  labels:
    app: autoware
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autoware
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: autoware
    spec:
      volumes:
        - name: volume
          emptyDir: {}
      containers:
        - name: sdk
          image: registry.autocore.ai/sdv/autoware-architecture-proposal-sdk:sdv
          imagePullPolicy: Always
          volumeMounts:
            - name: volume
              mountPath: /AutowareArchitectureProposal
          command: ["/bin/bash"]
          args: ["-c", "export ROS_DOMAIN_ID=${HOSTNAME##*-} && export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && cd /AutowareArchitectureProposal && source install/setup.bash && ros2 launch sdv_demo_launch sdv_demo.launch.xml"]
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
      initContainers:
        - name: exe
          image: registry.autocore.ai/sdv/autoware-architecture-proposal-exe:sdv
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/install /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
        - name: env
          image: registry.autocore.ai/sdv/autoware-architecture-proposal-env:sdv
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/env /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zenoh-bridge-dds
  namespace: sdv
  labels:
    app: zenoh-bridge-dds
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zenoh-bridge-dds
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: zenoh-bridge-dds
    spec:
      volumes:
        - name: volume
          emptyDir: {}
      containers:
        - name: zenoh-bridge-dds
          image: moelang/zenoh-bridge-dds:latest
          command: ["/bin/bash"]
          args: ["-c", "export RUST_LOG=debug && export ROS_DOMAIN_ID=${HOSTNAME##*-} && zenoh-bridge-dds --scope /demo/dds -m peer -d ${ROS_DOMAIN_ID}"]
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rsu
  namespace: sdv
  labels:
    app: rsu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rsu
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: rsu
    spec:
      containers:
        - name: rsu
          image: registry.autocore.ai/sdv/rsu:sdv
          imagePullPolicy: Always
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: RUST_LOG
            value: debug
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: storage
  namespace: sdv
  labels:
    app: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: storage
    spec:
      hostNetwork: true
      containers:
        - name: storage
          image: registry.autocore.ai/sdv/zenoh:sdv
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: autotest-deployment
#   namespace: sdv
#   labels:
#     app: autotest
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: autotest
#   serviceName: "sdv"
#   template:
#     metadata:
#       labels:
#         app: autotest
#     spec:
#       containers:
#         - name: autotest
#           image: autotest:latest
#           command: ["/bin/bash", "-ce", "tail -f /dev/null"]
